<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <title>{{title}}</title>

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
          -->

    <!--[if lt IE 9]>
      <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
      <![endif]-->

      <!--STYLES-->
      <link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.min.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/helpers/jquery.fancybox-thumbs.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/helpers/jquery.fancybox-buttons.css">
      <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
      <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/styles/custom.css" >
        <!--STYLES END-->
</head>

<body>
  <div class="container">

  {{> nav}}

  {{#if errors}}
  <div class="container">
    <div class="alert alert-danger alert-dismissible" role="alert">
      <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span
        class="sr-only">Close</span></button>
        {{#each errors}}
        <div>{{this}}</div>
        {{/each}}
      </div>
    </div>
    {{/if}}

    <!-- Page Content -->
    {{{body}}}

    <hr>

    <footer>
      <p>&copy; Company 2014</p>
    </footer>
  </div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
            -->

            <!--TEMPLATES-->

            <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

        -->

        <!--SCRIPTS-->
        <!-- jQuery Version 2.0.2 -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"></script>
        <!-- Bootstrap Core JavaScript -->
        <script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/js/bootstrap.min.js"></script>
        <script src="/js/dropzone.js"></script>

        <!-- Fancy box-->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.pack.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/helpers/jquery.fancybox-thumbs.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/helpers/jquery.fancybox-buttons.js"></script>
        <script src="/js/dependencies/sails.io.js"></script>
        <!--SCRIPTS END-->
        <script type="text/javascript">
          $(function() {

            Dropzone.options.imageFile = {
              paramName: "imageFile",
        maxFilesize: 10, // MB
        // maxFiles: 10,
        addRemoveLinks: true,
        acceptedFiles: "image/jpeg, image/jpg, image/png, image/gif",
        accept: function(file, done) {
          done();
        },
        init: function() {
          this.on("addedfile", function(file) { console.log("Added file."); });
        },
        sending: function(file, xhr, formData) {
            formData.append("filesize", file.size); // Will send the filesize along with  the file as POST data.
            console.log(file.size)
            console.log(file)
          },
          success: function(err, res){
            setTimeout(function(){
              $('.progress .progress-bar').css('width',0 + '%');
            }, 1000)
            $('.progress .progress-bar').removeClass('progress-bar-success').addClass('progress-bar-warning')
            console.log(res)
            var imgpath = location.protocol + '//' + location.host + '/'+ res.files[0].name;
            var thumbLocation = location.protocol + '//' + location.host + '/'+ res.files[0].thumbpath;
            $('#homeUplGallery').append($("<a class='img-thumbnail' href=" + imgpath +" >")
              .html("<img class='img-responsive' style='width: 200px; height: 200px;' src='" + thumbLocation +"' >"))
          },
          uploadprogress: function(err,progress,bytesSent){
            $('.progress .progress-bar').css(
              'width',
              progress + '%'
              );
            console.log(progress)
            if(progress > 30)
              setTimeout(function(){
                $('.progress .progress-bar').removeClass('progress-bar-warning').addClass('progress-bar-success')
              }, 500)
          },
        };
      })
</script>
<script>
 $(document).ready(function() {
  $('.fancybox-thumbs').fancybox({
    prevEffect : 'none',
    nextEffect : 'none',

    closeBtn  : true,
    arrows    : true,
    nextClick : true,
    autoSize  : true,

    helpers : {
      thumbs : {
        width  : 50,
        height : 50
      }
    }
  });
});
</script>
</body>
</html>
